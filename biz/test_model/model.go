package test_model

import (
	"time"

	"gorm.io/gorm"
)

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

const TableNamePerson = "people"

// Person mapped from table <people>
type Person struct {
	ID          int64          `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"`
	Name        string         `gorm:"column:name" json:"name"`
	Age         int32          `gorm:"column:age" json:"age"`
	Flag        bool           `gorm:"column:flag" json:"flag"`
	Commit      string         `gorm:"column:commit" json:"commit"`
	First       bool           `gorm:"column:First" json:"First"`
	FlagAnother int32          `gorm:"column:flag_another" json:"flag_another"`
	Bit         []uint8        `gorm:"column:bit" json:"bit"`
	Small       int32          `gorm:"column:small" json:"small"`
	DeletedAt   gorm.DeletedAt `gorm:"column:deleted_at" json:"deleted_at"`
	Score       float64        `gorm:"column:score" json:"score"`
	Type        int32          `gorm:"column:type" json:"type"`
	Birth       time.Time      `gorm:"column:birth" json:"birth"`
}

// TableName Person's table name
func (*Person) TableName() string {
	return TableNamePerson
}

const TableNameJustUser = "user"

// JustUser mapped from table <user>
type JustUser struct {
	ID           int64     `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"`
	Name         string    `gorm:"column:name" json:"name"` // oneline
	Address      string    `gorm:"column:address" json:"address"`
	RegisterTime time.Time `gorm:"column:register_time" json:"register_time"`
	/*
		multiline
		line1
		line2
	*/
	Alive          bool      `gorm:"column:alive" json:"alive"`
	CreatedAt      time.Time `gorm:"column:created_at" json:"created_at"`
	CompanyID      int64     `gorm:"column:company_id;default:666" json:"company_id"`
	PrivateURL     string    `gorm:"column:private_url;default:https://a.b.c" json:"private_url"`
	XMLHTTPRequest string    `gorm:"column:xmlHTTPRequest;default:' '" json:"xmlHTTPRequest"`
	JStr           string    `gorm:"column:jStr" json:"jStr"`
	Geo            string    `gorm:"column:geo" json:"geo"`
	Mint           int32     `gorm:"column:mint" json:"mint"`
	Blank          string    `gorm:"column:blank;default:' '" json:"blank"`
}

// TableName JustUser's table name
func (*JustUser) TableName() string {
	return TableNameJustUser
}

const TableNameAddr = "address"

// Addr mapped from table <address>
type Addr struct {
	ID     int64  `gorm:"column:id;primaryKey;autoIncrement:true" json:"id" newTag:"tag info"`
	Street string `gorm:"column:street" json:"street"`
	UserID int64  `gorm:"column:user_id" json:"user_id"`
}

// TableName Addr's table name
func (*Addr) TableName() string {
	return TableNameAddr
}
