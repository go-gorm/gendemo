// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-gorm/gendemo/biz/model"
)

func newCompany(db *gorm.DB) company {
	_company := company{}

	_company.companyDo.UseDB(db)
	_company.companyDo.UseModel(&model.Company{})

	tableName := _company.companyDo.TableName()
	_company.ALL = field.NewField(tableName, "*")
	_company.ID = field.NewInt(tableName, "id")
	_company.CreatedAt = field.NewTime(tableName, "created_at")
	_company.UpdatedAt = field.NewTime(tableName, "updated_at")
	_company.DeletedAt = field.NewField(tableName, "deleted_at")
	_company.Name = field.NewString(tableName, "name")
	_company.CreateAt = field.NewTime(tableName, "create_at")
	_company.Broken = field.NewBool(tableName, "broken")
	_company.MarketValue = field.NewFloat64(tableName, "market_value")

	_company.fillFieldMap()

	return _company
}

type company struct {
	companyDo companyDo

	ALL         field.Field
	ID          field.Int
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Name        field.String
	CreateAt    field.Time
	Broken      field.Bool
	MarketValue field.Float64

	fieldMap map[string]field.Expr
}

func (c company) Table(newTableName string) *company {
	c.companyDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c company) As(alias string) *company {
	c.companyDo.DO = *(c.companyDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *company) updateTableName(table string) *company {
	c.ALL = field.NewField(table, "*")
	c.ID = field.NewInt(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Name = field.NewString(table, "name")
	c.CreateAt = field.NewTime(table, "create_at")
	c.Broken = field.NewBool(table, "broken")
	c.MarketValue = field.NewFloat64(table, "market_value")

	c.fillFieldMap()

	return c
}

func (c *company) WithContext(ctx context.Context) *companyDo { return c.companyDo.WithContext(ctx) }

func (c company) TableName() string { return c.companyDo.TableName() }

func (c company) Alias() string { return c.companyDo.Alias() }

func (c *company) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *company) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["name"] = c.Name
	c.fieldMap["create_at"] = c.CreateAt
	c.fieldMap["broken"] = c.Broken
	c.fieldMap["market_value"] = c.MarketValue
}

func (c company) clone(db *gorm.DB) company {
	c.companyDo.ReplaceDB(db)
	return c
}

type companyDo struct{ gen.DO }

//Where("name=@name and age=@age")
func (c companyDo) FindByNameAndAge(name string, age int) (result *model.Company, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["name"] = name
	params["age"] = age
	generateSQL.WriteString("name=@name and age=@age ")

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = c.UnderlyingDB().Where(generateSQL.String(), params).Take(&result)
	} else {
		executeSQL = c.UnderlyingDB().Where(generateSQL.String()).Take(&result)
	}
	err = executeSQL.Error
	return
}

//sql(select id,name,age from users where age>18)
func (c companyDo) FindBySimpleName() (result []*model.Company, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("select id,name,age from users where age>18 ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Find(&result)
	err = executeSQL.Error
	return
}

//sql(select id,name,age from @@table where age>18
//{{if cond1}}and id=@id {{end}}
//{{if name == ""}}and @@col=@name{{end}})
func (c companyDo) FindByIDOrName(cond1 bool, id int, col string, name string) (result *model.Company, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	generateSQL.WriteString("select id,name,age from companies where age>18 ")
	if cond1 {
		params["id"] = id
		generateSQL.WriteString("and id=@id ")
	}
	if name == "" {
		params["name"] = name
		generateSQL.WriteString("and " + c.Quote(col) + "=@name ")
	}

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params).Take(&result)
	} else {
		executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Take(&result)
	}
	err = executeSQL.Error
	return
}

//sql(select * from users)
func (c companyDo) FindAll() (result []map[string]interface{}, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("select * from users ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Find(&result)
	err = executeSQL.Error
	return
}

//sql(select * from users limit 1)
func (c companyDo) FindOne() (result map[string]interface{}) {
	var generateSQL strings.Builder
	generateSQL.WriteString("select * from users limit 1 ")

	result = make(map[string]interface{})
	_ = c.UnderlyingDB().Raw(generateSQL.String()).Take(result)
	return
}

//sql(select address from users limit 1)
func (c companyDo) FindAddress() (result *model.Company, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("select address from users limit 1 ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String()).Take(&result)
	err = executeSQL.Error
	return
}

func (c companyDo) Debug() *companyDo {
	return c.withDO(c.DO.Debug())
}

func (c companyDo) WithContext(ctx context.Context) *companyDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c companyDo) ReadDB() *companyDo {
	return c.Clauses(dbresolver.Read)
}

func (c companyDo) WriteDB() *companyDo {
	return c.Clauses(dbresolver.Write)
}

func (c companyDo) Clauses(conds ...clause.Expression) *companyDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c companyDo) Returning(value interface{}, columns ...string) *companyDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c companyDo) Not(conds ...gen.Condition) *companyDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c companyDo) Or(conds ...gen.Condition) *companyDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c companyDo) Select(conds ...field.Expr) *companyDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c companyDo) Where(conds ...gen.Condition) *companyDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c companyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *companyDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c companyDo) Order(conds ...field.Expr) *companyDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c companyDo) Distinct(cols ...field.Expr) *companyDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c companyDo) Omit(cols ...field.Expr) *companyDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c companyDo) Join(table schema.Tabler, on ...field.Expr) *companyDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c companyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *companyDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c companyDo) RightJoin(table schema.Tabler, on ...field.Expr) *companyDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c companyDo) Group(cols ...field.Expr) *companyDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c companyDo) Having(conds ...gen.Condition) *companyDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c companyDo) Limit(limit int) *companyDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c companyDo) Offset(offset int) *companyDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c companyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *companyDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c companyDo) Unscoped() *companyDo {
	return c.withDO(c.DO.Unscoped())
}

func (c companyDo) Create(values ...*model.Company) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c companyDo) CreateInBatches(values []*model.Company, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c companyDo) Save(values ...*model.Company) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c companyDo) First() (*model.Company, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Company), nil
	}
}

func (c companyDo) Take() (*model.Company, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Company), nil
	}
}

func (c companyDo) Last() (*model.Company, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Company), nil
	}
}

func (c companyDo) Find() ([]*model.Company, error) {
	result, err := c.DO.Find()
	return result.([]*model.Company), err
}

func (c companyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Company, err error) {
	buf := make([]*model.Company, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c companyDo) FindInBatches(result *[]*model.Company, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c companyDo) Attrs(attrs ...field.AssignExpr) *companyDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c companyDo) Assign(attrs ...field.AssignExpr) *companyDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c companyDo) Joins(fields ...field.RelationField) *companyDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c companyDo) Preload(fields ...field.RelationField) *companyDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c companyDo) FirstOrInit() (*model.Company, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Company), nil
	}
}

func (c companyDo) FirstOrCreate() (*model.Company, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Company), nil
	}
}

func (c companyDo) FindByPage(offset int, limit int) (result []*model.Company, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c companyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c companyDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c *companyDo) withDO(do gen.Dao) *companyDo {
	c.DO = *do.(*gen.DO)
	return c
}
